#ifndef TOKENS_HPP
#define TOKENS_HPP

namespace rustc
{
using token_type = int;
enum TokenID : int
{
    // use ASCII values for single char tokens
    KW_SEMICOLON = ';',
    KW_LPARENTHESIS = '(',
    KW_RPARENTHESIS = ')',
    KW_ASSIGN = '=',
    KW_STAR = '*',
    KW_DIVIDE = '/',
    KW_PLUS = '+',
    KW_MINUS = '-',
    KW_LBRAСKET = '[',
    KW_RBRACKET = ']',
    KW_LBRACER = '{',
    KW_RBRACER = '}',

    // composite tokens
    KW_PLUS_PLUS = 180,       // ++
    KW_MINUS_MINUS,     // --
    KW_PLUS_ASSIGN,     // +=
    KW_MINUS_ASSIGN,    // -=
    KW_MULTIPLY_ASSIGN, // *=
    KW_DIVIDE_ASSIGN,   // /=

    // spec words
    KW_WHILE = 230,
    KW_IF,
    KW_RETURN,

    // identifiers, constants, etc.
    KW_IDENTIFIER = 280,
    KW_INTEGER,
    KW_DOUBLE,
    KW_STRING,

    KW_END,    // code used when at end of file
    KW_UNKNOWN // token was unrecognized by scanner

};

// use ASCII values for single char tokens
#define KW_SEMICOLON ';'
#define KW_LPARENTHESIS '('
#define KW_RPARENTHESIS ')'
#define KW_ASSIGN '='
#define KW_STAR '*'
#define KW_DIVIDE '/'
#define KW_PLUS '+'
#define KW_MINUS '-'
#define KW_LBRAСKET '['
#define KW_RBRACKET ']'
#define KW_LBRACER '{'
#define KW_RBRACER '}'
// composite tokens
#define KW_PLUS_PLUS 130       // ++
#define KW_MINUS_MINUS 131     // --
#define KW_PLUS_ASSIGN 132     // +=
#define KW_MINUS_ASSIGN 133    // -=
#define KW_MULTIPLY_ASSIGN 134 // *=
#define KW_DIVIDE_ASSIGN 135   // /=
// reserved words

// Rust spec keywords
/* strict

//KW_AS : as
//KW_BREAK : break
//KW_CONST : const
//KW_CONTINUE : continue
//KW_CRATE : crate
//KW_ELSE : else
//KW_ENUM : enum
//KW_EXTERN : extern
//KW_FALSE : false
//KW_FN : fn
//KW_FOR : for
//KW_IF : if
//KW_IMPL : impl
//KW_IN : in
//KW_LET : let
//KW_LOOP : loop
//KW_MATCH : match
//KW_MOD : mod
//KW_MOVE : move
//KW_MUT : mut
//KW_PUB : pub
//KW_REF : ref
//KW_RETURN : return
//KW_SELFVALUE : self
//KW_SELFTYPE : Self
//KW_STATIC : static
//KW_STRUCT : struct
//KW_SUPER : super
//KW_TRAIT : trait
//KW_TRUE : true
//KW_TYPE : type
//KW_UNSAFE : unsafe
//KW_USE : use
//KW_WHERE : where
//KW_WHILE : while
*/
/* reserved
 KW_ABSTRACT : abstract
KW_BECOME : become
KW_BOX : box
KW_DO : do
KW_FINAL : final
KW_MACRO : macro
KW_OVERRIDE : override
KW_PRIV : priv
KW_TYPEOF : typeof
KW_UNSIZED : unsized
KW_VIRTUAL : virtual
KW_YIELD : yield
*/
/* weak
KW_UNION : union
KW_STATICLIFETIME : 'static

Lexer 2015
KW_DYN : dyn
*/

#define KW_WHILE 257
#define KW_IF 258
#define KW_RETURN 259

// identifiers, constants, etc.
#define KW_IDENTIFIER 268
#define KW_INTEGER 269
#define KW_DOUBLE 270
#define KW_STRING 271

#define KW_END 349     // code used when at end of file
#define KW_UNKNOWN 350 // token was unrecognized by scanner
} // namespace rustc
#endif // TOKENS_HPP
